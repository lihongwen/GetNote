import { Modal, App, ButtonComponent, Notice } from 'obsidian';
import { AudioRecorder } from './recorder';

export type RecordingState = 'idle' | 'recording' | 'paused';

export class RecordingModal extends Modal {
    private audioRecorder: AudioRecorder | null = null;
    private state: RecordingState = 'idle';
    private timerInterval: number | null = null;
    
    // UI Elements - ÁÆÄÂåñËÆæËÆ°
    private statusContainer: HTMLElement;
    private statusDot: HTMLElement;
    private statusText: HTMLElement;
    private timeDisplay: HTMLElement;
    private startButton: ButtonComponent;
    private pauseButton: ButtonComponent;
    private stopButton: ButtonComponent;
    private hintText: HTMLElement;
    
    // Callbacks
    private onRecordingComplete: (audioBlob: Blob) => Promise<void>;
    private onError: (error: Error) => void;

    constructor(
        app: App, 
        onRecordingComplete: (audioBlob: Blob) => Promise<void>,
        onError: (error: Error) => void
    ) {
        super(app);
        this.onRecordingComplete = onRecordingComplete;
        this.onError = onError;
    }

    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        
        // ËÆæÁΩÆModalÊ†∑Âºè
        contentEl.addClass('recording-modal');
        
        // ÂàõÂª∫‰∏ªÂÆπÂô®
        const container = contentEl.createDiv('simple-recording-container');
        
        // Ê†áÈ¢ò
        const title = container.createEl('h2', { text: 'üéôÔ∏è ËØ≠Èü≥ÂΩïÂà∂' });
        title.addClass('simple-recording-title');
        
        // Áä∂ÊÄÅÊåáÁ§∫Âô®
        this.statusContainer = container.createDiv('simple-status');
        this.statusContainer.addClass('status-idle');
        this.statusDot = this.statusContainer.createDiv('status-dot');
        this.statusText = this.statusContainer.createEl('span', { text: 'ÂáÜÂ§áÂΩïÈü≥' });
        this.statusText.addClass('status-text');
        
        // Êó∂Èó¥ÊòæÁ§∫
        this.timeDisplay = container.createEl('div', { text: '00:00' });
        this.timeDisplay.addClass('simple-time');
        
        // ÊåâÈíÆÁªÑ
        const buttonGroup = container.createDiv('simple-buttons');
        
        // ÂºÄÂßãÊåâÈíÆ
        const startButtonEl = buttonGroup.createEl('button');
        startButtonEl.addClass('start-btn');
        this.startButton = new ButtonComponent(startButtonEl)
            .setButtonText('üé§ ÂºÄÂßãÂΩïÈü≥')
            .onClick(() => this.handleStart());
        
        // ÊöÇÂÅúÊåâÈíÆ
        const pauseButtonEl = buttonGroup.createEl('button');
        pauseButtonEl.addClass('pause-btn');
        this.pauseButton = new ButtonComponent(pauseButtonEl)
            .setButtonText('‚è∏Ô∏è ÊöÇÂÅú')
            .setDisabled(true)
            .onClick(() => this.handlePause());
        
        // ÂÅúÊ≠¢ÊåâÈíÆ
        const stopButtonEl = buttonGroup.createEl('button');
        stopButtonEl.addClass('stop-btn');
        this.stopButton = new ButtonComponent(stopButtonEl)
            .setButtonText('‚èπÔ∏è ÂÅúÊ≠¢')
            .setDisabled(true)
            .onClick(() => this.handleStop());
        
        // ÊèêÁ§∫ÊñáÂ≠ó
        this.hintText = container.createEl('div', { 
            text: 'ÁÇπÂáªÂºÄÂßãÂΩïÈü≥ÔºåÂΩïÈü≥ÂÆåÊàêÂêéÂ∞ÜËá™Âä®ËΩ¨Êç¢‰∏∫ÊñáÂ≠óÁ¨îËÆ∞' 
        });
        this.hintText.addClass('simple-hint');
        
        // ËÆæÁΩÆÂàùÂßãÁä∂ÊÄÅ
        this.updateUI();
    }

    onClose() {
        // Ê∏ÖÁêÜÂÆöÊó∂Âô®
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
        
        // Â¶ÇÊûúÊ≠£Âú®ÂΩïÈü≥ÔºåÂÖàÂÅúÊ≠¢
        if (this.audioRecorder && this.audioRecorder.getRecordingState()) {
            this.audioRecorder.stopRecording();
        }
        
        this.audioRecorder = null;
    }

    private async handleStart() {
        try {
            if (this.state === 'paused') {
                // ÁªßÁª≠ÂΩïÈü≥
                this.audioRecorder?.resumeRecording();
                this.setState('recording');
                new Notice('ÁªßÁª≠ÂΩïÈü≥...');
            } else {
                // ÂºÄÂßãÊñ∞ÂΩïÈü≥
                this.setState('recording');
                
                // Ê£ÄÊü•È∫¶ÂÖãÈ£éÊùÉÈôê
                const hasPermission = await AudioRecorder.checkMicrophonePermission();
                if (!hasPermission) {
                    throw new Error('ÈúÄË¶ÅÈ∫¶ÂÖãÈ£éÊùÉÈôêÊâçËÉΩÂΩïÈü≥');
                }
                
                // ÂàõÂª∫ÂΩïÈü≥Âô®
                this.audioRecorder = new AudioRecorder(
                    (audioBlob) => this.handleRecordingComplete(audioBlob),
                    (error) => this.handleRecordingError(error)
                );
                
                await this.audioRecorder.startRecording();
                
                // ÂêØÂä®ÂÆöÊó∂Âô®
                this.startTimer();
                
                new Notice('ÂºÄÂßãÂΩïÈü≥...');
            }
        } catch (error) {
            this.setState('idle');
            this.onError(error as Error);
        }
    }

    private handlePause() {
        if (!this.audioRecorder) return;
        
        this.audioRecorder.pauseRecording();
        this.setState('paused');
        new Notice('ÂΩïÈü≥Â∑≤ÊöÇÂÅú');
    }

    private async handleStop() {
        if (this.audioRecorder && this.audioRecorder.getRecordingState()) {
            this.audioRecorder.stopRecording();
            // ÂΩïÈü≥ÂÆåÊàêÂêé‰ºöËá™Âä®Ë∞ÉÁî® handleRecordingComplete
        }
    }

    private async handleRecordingComplete(audioBlob: Blob) {
        try {
            // ÂÅúÊ≠¢ÂÆöÊó∂Âô®
            if (this.timerInterval) {
                clearInterval(this.timerInterval);
                this.timerInterval = null;
            }
            
            // ÂÖ≥Èó≠Modal
            this.close();
            
            // Ë∞ÉÁî®ÂõûË∞ÉÂ§ÑÁêÜÂΩïÈü≥Êï∞ÊçÆ
            await this.onRecordingComplete(audioBlob);
            
        } catch (error) {
            this.setState('idle');
            this.onError(error as Error);
        }
    }

    private handleRecordingError(error: Error) {
        this.setState('idle');
        this.onError(error);
    }

    private setState(newState: RecordingState) {
        this.state = newState;
        this.updateUI();
    }

    private updateUI() {
        // ÁßªÈô§ÊâÄÊúâÁä∂ÊÄÅÁ±ª
        this.statusContainer.removeClass('status-idle', 'status-recording', 'status-paused');
        this.timeDisplay.removeClass('recording');
        
        // Ê†πÊçÆÁä∂ÊÄÅÊõ¥Êñ∞UI
        switch (this.state) {
            case 'idle':
                this.statusContainer.addClass('status-idle');
                this.statusText.textContent = 'ÂáÜÂ§áÂΩïÈü≥';
                this.hintText.textContent = 'ÁÇπÂáªÂºÄÂßãÂΩïÈü≥ÔºåÂΩïÈü≥ÂÆåÊàêÂêéÂ∞ÜËá™Âä®ËΩ¨Êç¢‰∏∫ÊñáÂ≠óÁ¨îËÆ∞';
                
                // ÊåâÈíÆÁä∂ÊÄÅ
                this.startButton.setDisabled(false).setButtonText('üé§ ÂºÄÂßãÂΩïÈü≥');
                this.pauseButton.setDisabled(true);
                this.stopButton.setDisabled(true);
                break;
                
            case 'recording':
                this.statusContainer.addClass('status-recording');
                this.statusText.textContent = 'Ê≠£Âú®ÂΩïÈü≥...';
                this.timeDisplay.addClass('recording');
                this.hintText.textContent = 'Ê≠£Âú®ÂΩïÈü≥‰∏≠ÔºåÂèØ‰ª•ÊöÇÂÅúÊàñÂÅúÊ≠¢ÂΩïÈü≥';
                
                // ÊåâÈíÆÁä∂ÊÄÅ
                this.startButton.setDisabled(true);
                this.pauseButton.setDisabled(false);
                this.stopButton.setDisabled(false);
                break;
                
            case 'paused':
                this.statusContainer.addClass('status-paused');
                this.statusText.textContent = 'ÂΩïÈü≥Â∑≤ÊöÇÂÅú';
                this.timeDisplay.removeClass('recording');
                this.hintText.textContent = 'ÂΩïÈü≥Â∑≤ÊöÇÂÅúÔºåÂèØ‰ª•ÁªßÁª≠ÂΩïÈü≥ÊàñÂÅúÊ≠¢ÂΩïÈü≥';
                
                // ÊåâÈíÆÁä∂ÊÄÅ
                this.startButton.setDisabled(false).setButtonText('‚ñ∂Ô∏è ÁªßÁª≠ÂΩïÈü≥');
                this.pauseButton.setDisabled(true);
                this.stopButton.setDisabled(false);
                break;
        }
    }

    private startTimer() {
        this.timerInterval = window.setInterval(() => {
            if (this.audioRecorder) {
                const duration = this.audioRecorder.getRecordingDuration();
                this.timeDisplay.textContent = this.formatTime(duration);
            }
        }, 100); // ÊØè100msÊõ¥Êñ∞‰∏ÄÊ¨°
    }

    private formatTime(milliseconds: number): string {
        const totalSeconds = Math.floor(milliseconds / 1000);
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
} 
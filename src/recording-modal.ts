import { Modal, App, ButtonComponent, Notice } from 'obsidian';
import { AudioRecorder } from './recorder';

export type RecordingState = 'idle' | 'recording' | 'paused' | 'processing';

export class RecordingModal extends Modal {
    private audioRecorder: AudioRecorder | null = null;
    private state: RecordingState = 'idle';
    private timerInterval: number | null = null;
    
    // UI Elements
    private statusIndicator: HTMLElement;
    private timeDisplay: HTMLElement;
    private startButton: ButtonComponent;
    private pauseButton: ButtonComponent;
    private stopButton: ButtonComponent;
    private statusText: HTMLElement;
    
    // Callbacks
    private onRecordingComplete: (audioBlob: Blob) => Promise<void>;
    private onError: (error: Error) => void;

    constructor(
        app: App, 
        onRecordingComplete: (audioBlob: Blob) => Promise<void>,
        onError: (error: Error) => void
    ) {
        super(app);
        this.onRecordingComplete = onRecordingComplete;
        this.onError = onError;
    }

    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        
        // ËÆæÁΩÆModalÊ†áÈ¢òÂíåÊ†∑Âºè
        contentEl.addClass('recording-modal');
        
        // ÂàõÂª∫‰∏ªÂÆπÂô®
        const container = contentEl.createDiv('recording-container');
        
        // Ê†áÈ¢ò
        const title = container.createEl('h2', { text: 'üéôÔ∏è ËØ≠Èü≥ÂΩïÂà∂' });
        title.addClass('recording-title');
        
        // Áä∂ÊÄÅÊåáÁ§∫Âô®ÂÆπÂô®
        const statusContainer = container.createDiv('status-container');
        
        // ÂΩïÈü≥Áä∂ÊÄÅÊåáÁ§∫Âô®ÔºàÂúÜÂΩ¢ÊåáÁ§∫ÁÅØÔºâ
        this.statusIndicator = statusContainer.createDiv('status-indicator');
        this.statusIndicator.addClass('status-idle');
        
        // Áä∂ÊÄÅÊñáÊú¨
        this.statusText = statusContainer.createEl('div', { text: 'ÂáÜÂ§áÂΩïÈü≥' });
        this.statusText.addClass('status-text');
        
        // Êó∂Èó¥ÊòæÁ§∫
        this.timeDisplay = container.createEl('div', { text: '00:00' });
        this.timeDisplay.addClass('time-display');
        
        // ÊåâÈíÆÂÆπÂô®
        const buttonContainer = container.createDiv('button-container');
        
        // ÂºÄÂßãÂΩïÈü≥ÊåâÈíÆ
        const startButtonEl = buttonContainer.createEl('button');
        this.startButton = new ButtonComponent(startButtonEl)
            .setButtonText('üé§ ÂºÄÂßãÂΩïÈü≥')
            .setCta()
            .onClick(() => this.handleStart());
        
        // ÊöÇÂÅú/ÊÅ¢Â§çÊåâÈíÆ
        const pauseButtonEl = buttonContainer.createEl('button');
        this.pauseButton = new ButtonComponent(pauseButtonEl)
            .setButtonText('‚è∏Ô∏è ÊöÇÂÅú')
            .setDisabled(true)
            .onClick(() => this.handlePause());
        
        // ÂÅúÊ≠¢ÊåâÈíÆ
        const stopButtonEl = buttonContainer.createEl('button');
        this.stopButton = new ButtonComponent(stopButtonEl)
            .setButtonText('‚èπÔ∏è ÂÅúÊ≠¢')
            .setDisabled(true)
            .onClick(() => this.handleStop());
        
        // ÊèêÁ§∫‰ø°ÊÅØ
        const hintText = container.createEl('div', { 
            text: 'ÁÇπÂáªÂºÄÂßãÂΩïÈü≥ÔºåÂΩïÈü≥ÂÆåÊàêÂêéÂ∞ÜËá™Âä®ËΩ¨Êç¢‰∏∫ÊñáÂ≠óÁ¨îËÆ∞' 
        });
        hintText.addClass('hint-text');
        
        // ËÆæÁΩÆÂàùÂßãÁä∂ÊÄÅ
        this.updateUI();
    }

    onClose() {
        // Ê∏ÖÁêÜÂÆöÊó∂Âô®
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
        
        // Â¶ÇÊûúÊ≠£Âú®ÂΩïÈü≥ÔºåÂÖàÂÅúÊ≠¢
        if (this.audioRecorder && this.audioRecorder.getRecordingState()) {
            this.audioRecorder.stopRecording();
        }
        
        this.audioRecorder = null;
    }

    private async handleStart() {
        try {
            this.setState('recording');
            
            // Ê£ÄÊü•È∫¶ÂÖãÈ£éÊùÉÈôê
            const hasPermission = await AudioRecorder.checkMicrophonePermission();
            if (!hasPermission) {
                throw new Error('ÈúÄË¶ÅÈ∫¶ÂÖãÈ£éÊùÉÈôêÊâçËÉΩÂΩïÈü≥');
            }
            
            // ÂàõÂª∫ÂΩïÈü≥Âô®
            this.audioRecorder = new AudioRecorder(
                (audioBlob) => this.handleRecordingComplete(audioBlob),
                (error) => this.handleRecordingError(error)
            );
            
            await this.audioRecorder.startRecording();
            
            // ÂêØÂä®ÂÆöÊó∂Âô®Êõ¥Êñ∞Êó∂Èó¥ÊòæÁ§∫
            this.startTimer();
            
            new Notice('ÂºÄÂßãÂΩïÈü≥...');
            
        } catch (error) {
            this.setState('idle');
            this.onError(error as Error);
        }
    }

    private handlePause() {
        if (!this.audioRecorder) return;
        
        if (this.state === 'recording') {
            this.audioRecorder.pauseRecording();
            this.setState('paused');
            new Notice('ÂΩïÈü≥Â∑≤ÊöÇÂÅú');
        } else if (this.state === 'paused') {
            this.audioRecorder.resumeRecording();
            this.setState('recording');
            new Notice('ÁªßÁª≠ÂΩïÈü≥...');
        }
    }

    private async handleStop() {
        if (this.audioRecorder && this.audioRecorder.getRecordingState()) {
            this.setState('processing');
            this.audioRecorder.stopRecording();
            // ÂΩïÈü≥ÂÆåÊàêÂêé‰ºöËá™Âä®Ë∞ÉÁî® handleRecordingComplete
        }
    }

    private async handleRecordingComplete(audioBlob: Blob) {
        try {
            // ÂÅúÊ≠¢ÂÆöÊó∂Âô®
            if (this.timerInterval) {
                clearInterval(this.timerInterval);
                this.timerInterval = null;
            }
            
            // ÂÖ≥Èó≠Modal
            this.close();
            
            // Ë∞ÉÁî®ÂõûË∞ÉÂ§ÑÁêÜÂΩïÈü≥Êï∞ÊçÆ
            await this.onRecordingComplete(audioBlob);
            
        } catch (error) {
            this.setState('idle');
            this.onError(error as Error);
        }
    }

    private handleRecordingError(error: Error) {
        this.setState('idle');
        this.onError(error);
    }

    private setState(newState: RecordingState) {
        this.state = newState;
        this.updateUI();
    }

    private updateUI() {
        // Êõ¥Êñ∞Áä∂ÊÄÅÊåáÁ§∫Âô®
        this.statusIndicator.className = 'status-indicator';
        
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅÂíåÊñáÊú¨
        switch (this.state) {
            case 'idle':
                this.statusIndicator.addClass('status-idle');
                this.statusText.textContent = 'ÂáÜÂ§áÂΩïÈü≥';
                this.startButton.setDisabled(false).setButtonText('üé§ ÂºÄÂßãÂΩïÈü≥');
                this.pauseButton.setDisabled(true).setButtonText('‚è∏Ô∏è ÊöÇÂÅú');
                this.stopButton.setDisabled(true).setButtonText('‚èπÔ∏è ÂÅúÊ≠¢');
                break;
                
            case 'recording':
                this.statusIndicator.addClass('status-recording');
                this.statusText.textContent = 'Ê≠£Âú®ÂΩïÈü≥...';
                this.startButton.setDisabled(true).setButtonText('üé§ ÂΩïÈü≥‰∏≠');
                this.pauseButton.setDisabled(false).setButtonText('‚è∏Ô∏è ÊöÇÂÅú');
                this.stopButton.setDisabled(false).setButtonText('‚èπÔ∏è ÂÅúÊ≠¢');
                break;
                
            case 'paused':
                this.statusIndicator.addClass('status-paused');
                this.statusText.textContent = 'ÂΩïÈü≥Â∑≤ÊöÇÂÅú';
                this.startButton.setDisabled(true).setButtonText('üé§ ÂΩïÈü≥‰∏≠');
                this.pauseButton.setDisabled(false).setButtonText('‚ñ∂Ô∏è ÁªßÁª≠');
                this.stopButton.setDisabled(false).setButtonText('‚èπÔ∏è ÂÅúÊ≠¢');
                break;
                
            case 'processing':
                this.statusIndicator.addClass('status-processing');
                this.statusText.textContent = 'Â§ÑÁêÜ‰∏≠...';
                this.startButton.setDisabled(true).setButtonText('üé§ Â§ÑÁêÜ‰∏≠');
                this.pauseButton.setDisabled(true).setButtonText('‚è∏Ô∏è ÊöÇÂÅú');
                this.stopButton.setDisabled(true).setButtonText('‚èπÔ∏è Â§ÑÁêÜ‰∏≠');
                break;
        }
    }

    private startTimer() {
        this.timerInterval = window.setInterval(() => {
            if (this.audioRecorder) {
                const duration = this.audioRecorder.getRecordingDuration();
                this.timeDisplay.textContent = this.formatTime(duration);
            }
        }, 100); // ÊØè100msÊõ¥Êñ∞‰∏ÄÊ¨°
    }

    private formatTime(milliseconds: number): string {
        const totalSeconds = Math.floor(milliseconds / 1000);
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
} 
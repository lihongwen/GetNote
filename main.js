/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GetNotePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/recorder.ts
var AudioRecorder = class {
  constructor(onDataAvailable, onError) {
    this.onDataAvailable = onDataAvailable;
    this.onError = onError;
    this.mediaRecorder = null;
    this.audioChunks = [];
    this.stream = null;
    this.isRecording = false;
    this.isPaused = false;
    this.startTime = 0;
    this.pausedDuration = 0;
    this.pauseStartTime = 0;
  }
  async startRecording() {
    if (this.isRecording) {
      throw new Error("\u5DF2\u5728\u5F55\u97F3\u4E2D");
    }
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 44100
        }
      });
      this.mediaRecorder = new MediaRecorder(this.stream, {
        mimeType: this.getSupportedMimeType()
      });
      this.audioChunks = [];
      this.mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          this.audioChunks.push(event.data);
        }
      };
      this.mediaRecorder.onstop = () => {
        const audioBlob = new Blob(this.audioChunks, {
          type: this.getSupportedMimeType()
        });
        this.onDataAvailable(audioBlob);
        this.cleanup();
      };
      this.mediaRecorder.onerror = (event) => {
        this.onError(new Error(`\u5F55\u97F3\u9519\u8BEF: ${event.error}`));
        this.cleanup();
      };
      this.mediaRecorder.start(1e3);
      this.isRecording = true;
      this.isPaused = false;
      this.startTime = Date.now();
      this.pausedDuration = 0;
    } catch (error) {
      this.onError(new Error(`\u65E0\u6CD5\u542F\u52A8\u5F55\u97F3: ${error.message}`));
      this.cleanup();
      throw error;
    }
  }
  stopRecording() {
    if (this.mediaRecorder && this.isRecording) {
      this.mediaRecorder.stop();
      this.isRecording = false;
      this.isPaused = false;
    }
  }
  pauseRecording() {
    if (this.mediaRecorder && this.isRecording && !this.isPaused) {
      this.mediaRecorder.pause();
      this.isPaused = true;
      this.pauseStartTime = Date.now();
    }
  }
  resumeRecording() {
    if (this.mediaRecorder && this.isRecording && this.isPaused) {
      this.mediaRecorder.resume();
      this.isPaused = false;
      this.pausedDuration += Date.now() - this.pauseStartTime;
    }
  }
  getRecordingState() {
    return this.isRecording;
  }
  getPausedState() {
    return this.isPaused;
  }
  cleanup() {
    if (this.stream) {
      this.stream.getTracks().forEach((track) => track.stop());
      this.stream = null;
    }
    this.mediaRecorder = null;
    this.isRecording = false;
    this.isPaused = false;
    this.audioChunks = [];
    this.startTime = 0;
    this.pausedDuration = 0;
    this.pauseStartTime = 0;
  }
  getSupportedMimeType() {
    const types = [
      "audio/webm;codecs=opus",
      "audio/webm",
      "audio/ogg;codecs=opus",
      "audio/ogg",
      "audio/wav",
      "audio/mp4",
      "audio/mpeg"
    ];
    for (const type of types) {
      if (MediaRecorder.isTypeSupported(type)) {
        return type;
      }
    }
    return "audio/webm";
  }
  // 获取录音时长（毫秒）
  getRecordingDuration() {
    if (!this.isRecording) {
      return 0;
    }
    const currentTime = Date.now();
    let totalDuration = currentTime - this.startTime - this.pausedDuration;
    if (this.isPaused) {
      totalDuration -= currentTime - this.pauseStartTime;
    }
    return Math.max(0, totalDuration);
  }
  // 检查浏览器是否支持录音
  static isSupported() {
    return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia && window.MediaRecorder);
  }
  // 检查麦克风权限
  static async checkMicrophonePermission() {
    try {
      const result = await navigator.permissions.query({ name: "microphone" });
      return result.state === "granted";
    } catch (error) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        stream.getTracks().forEach((track) => track.stop());
        return true;
      } catch (e) {
        return false;
      }
    }
  }
};

// src/api-client.ts
var import_obsidian = require("obsidian");
var DashScopeClient = class {
  constructor(apiKey) {
    this.baseUrl = "https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation";
    this.compatibleUrl = "https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions";
    this.apiKey = apiKey;
  }
  async processAudio(audioBlob, prompt = "") {
    var _a, _b, _c, _d, _e, _f;
    try {
      const audioType = this.detectAudioType(audioBlob);
      const audioBase64 = await this.blobToBase64(audioBlob);
      console.log(`\u5904\u7406\u97F3\u9891: \u7C7B\u578B=${audioType}, \u5927\u5C0F=${audioBlob.size}\u5B57\u8282`);
      const request = {
        model: "qwen-audio-asr-latest",
        input: {
          messages: [
            {
              role: "user",
              content: [
                {
                  audio: `data:${audioType};base64,${audioBase64}`
                }
              ]
            }
          ]
        }
      };
      console.log("=== \u97F3\u9891\u5904\u7406API\u8C03\u8BD5\u4FE1\u606F ===");
      console.log("\u8BF7\u6C42URL:", this.baseUrl);
      console.log("\u8BF7\u6C42\u5BF9\u8C61 (request):", request);
      console.log("\u8BF7\u6C42JSON\u5B57\u7B26\u4E32:", JSON.stringify(request, null, 2));
      console.log("========================");
      console.log("\u53D1\u9001API\u8BF7\u6C42\u5230:", this.baseUrl);
      const requestBody = JSON.stringify(request);
      const response = await (0, import_obsidian.requestUrl)({
        url: this.baseUrl,
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`,
          "Content-Type": "application/json"
        },
        body: requestBody,
        throw: false
        // 手动处理HTTP错误
      });
      console.log("API\u54CD\u5E94\u72B6\u6001:", response.status);
      if (response.status >= 400) {
        console.error("API\u9519\u8BEF\u8BE6\u60C5:", response.text);
        throw new Error(`API\u8BF7\u6C42\u5931\u8D25 (${response.status}): ${response.text}`);
      }
      const data = response.json;
      console.log("API\u54CD\u5E94\u6570\u636E:", JSON.stringify(data, null, 2));
      if ((_f = (_e = (_d = (_c = (_b = (_a = data.output) == null ? void 0 : _a.choices) == null ? void 0 : _b[0]) == null ? void 0 : _c.message) == null ? void 0 : _d.content) == null ? void 0 : _e[0]) == null ? void 0 : _f.text) {
        return data.output.choices[0].message.content[0].text;
      } else {
        console.error("API\u8FD4\u56DE\u683C\u5F0F\u5F02\u5E38:", data);
        throw new Error("API\u8FD4\u56DE\u6570\u636E\u683C\u5F0F\u5F02\u5E38");
      }
    } catch (error) {
      console.error("DashScope API\u8C03\u7528\u5931\u8D25:", error);
      if (error instanceof TypeError && error.message === "Failed to fetch") {
        throw new Error("\u7F51\u7EDC\u8FDE\u63A5\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u72B6\u6001\u548CAPI Key\u662F\u5426\u6B63\u786E");
      } else if (error.message.includes("401")) {
        throw new Error("API Key\u65E0\u6548\uFF0C\u8BF7\u68C0\u67E5\u60A8\u7684\u5BC6\u94A5\u914D\u7F6E");
      } else if (error.message.includes("429")) {
        throw new Error("API\u8C03\u7528\u9891\u7387\u8D85\u9650\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5");
      } else {
        throw new Error(`\u97F3\u9891\u5904\u7406\u5931\u8D25: ${error.message}`);
      }
    }
  }
  detectAudioType(blob) {
    if (blob.type && blob.type.startsWith("audio/")) {
      return blob.type;
    }
    return "audio/wav";
  }
  async blobToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result;
        const base64 = result.split(",")[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }
  // 测试API连接
  async testConnection() {
    var _a, _b, _c, _d, _e, _f;
    try {
      console.log("\u5F00\u59CBAPI\u8FDE\u63A5\u6D4B\u8BD5...");
      const testRequest = {
        model: "qwen-audio-asr-latest",
        input: {
          messages: [
            {
              role: "user",
              content: [
                {
                  audio: "https://dashscope.oss-cn-beijing.aliyuncs.com/audios/welcome.mp3"
                }
              ]
            }
          ]
        }
      };
      console.log("=== API\u8C03\u8BD5\u4FE1\u606F ===");
      console.log("\u8BF7\u6C42URL:", this.baseUrl);
      console.log("\u8BF7\u6C42\u5BF9\u8C61 (testRequest):", testRequest);
      console.log("\u8BF7\u6C42JSON\u5B57\u7B26\u4E32:", JSON.stringify(testRequest, null, 2));
      console.log("=================");
      console.log("\u53D1\u9001\u6D4B\u8BD5\u8BF7\u6C42...");
      const requestBody = JSON.stringify(testRequest);
      const response = await (0, import_obsidian.requestUrl)({
        url: this.baseUrl,
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`,
          "Content-Type": "application/json"
        },
        body: requestBody,
        throw: false
        // 手动处理HTTP错误
      });
      console.log("\u6D4B\u8BD5\u54CD\u5E94\u72B6\u6001:", response.status);
      if (response.status >= 400) {
        console.error("\u6D4B\u8BD5\u8BF7\u6C42\u5931\u8D25:", response.text);
        return {
          success: false,
          error: `HTTP ${response.status}: ${response.text}`
        };
      }
      const data = response.json;
      console.log("\u6D4B\u8BD5\u54CD\u5E94\u6570\u636E:", JSON.stringify(data, null, 2));
      if ((_f = (_e = (_d = (_c = (_b = (_a = data.output) == null ? void 0 : _a.choices) == null ? void 0 : _b[0]) == null ? void 0 : _c.message) == null ? void 0 : _d.content) == null ? void 0 : _e[0]) == null ? void 0 : _f.text) {
        console.log("API\u6D4B\u8BD5\u6210\u529F\uFF0C\u8FD4\u56DE\u5185\u5BB9:", data.output.choices[0].message.content[0].text);
        return { success: true };
      } else {
        return {
          success: false,
          error: "\u54CD\u5E94\u683C\u5F0F\u5F02\u5E38"
        };
      }
    } catch (error) {
      console.error("API\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25:", error);
      let errorMessage = "\u672A\u77E5\u9519\u8BEF";
      if (error instanceof TypeError && error.message === "Failed to fetch") {
        errorMessage = "\u7F51\u7EDC\u8FDE\u63A5\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u72B6\u6001";
      } else if (error.message) {
        errorMessage = error.message;
      }
      return {
        success: false,
        error: errorMessage
      };
    }
  }
  // 获取支持的音频格式
  getSupportedAudioFormats() {
    return [
      "audio/wav",
      "audio/mp3",
      "audio/m4a",
      "audio/flac",
      "audio/ogg"
    ];
  }
  // 检查音频文件大小限制（DashScope通常有文件大小限制）
  checkAudioSize(audioBlob) {
    const maxSize = 10 * 1024 * 1024;
    if (audioBlob.size > maxSize) {
      return {
        valid: false,
        message: `\u97F3\u9891\u6587\u4EF6\u8FC7\u5927\uFF0C\u6700\u5927\u652F\u6301${maxSize / 1024 / 1024}MB`
      };
    }
    return { valid: true };
  }
  // 创建自定义提示词用于不同的音频处理场景
  createPrompt(scenario) {
    const prompts = {
      transcription: "\u8BF7\u5C06\u8FD9\u6BB5\u97F3\u9891\u51C6\u786E\u8F6C\u5F55\u4E3A\u6587\u672C\uFF0C\u4FDD\u6301\u539F\u8BDD\u7684\u5B8C\u6574\u6027\u3002",
      summary: "\u8BF7\u542C\u8FD9\u6BB5\u97F3\u9891\u5E76\u751F\u6210\u4E00\u4EFD\u7B80\u6D01\u7684\u6458\u8981\uFF0C\u7A81\u51FA\u4E3B\u8981\u5185\u5BB9\u548C\u5173\u952E\u70B9\u3002",
      notes: "\u8BF7\u5C06\u8FD9\u6BB5\u97F3\u9891\u5185\u5BB9\u6574\u7406\u6210\u7ED3\u6784\u5316\u7684\u7B14\u8BB0\u683C\u5F0F\uFF0C\u5305\u542B\u6807\u9898\u3001\u8981\u70B9\u548C\u8BE6\u7EC6\u8BF4\u660E\u3002\u4F7F\u7528Markdown\u683C\u5F0F\u3002",
      "action-items": "\u8BF7\u4ECE\u8FD9\u6BB5\u97F3\u9891\u4E2D\u63D0\u53D6\u6240\u6709\u7684\u5F85\u529E\u4E8B\u9879\u3001\u51B3\u5B9A\u548C\u884C\u52A8\u8BA1\u5212\uFF0C\u5E76\u4EE5\u6E05\u5355\u5F62\u5F0F\u5217\u51FA\u3002"
    };
    return prompts[scenario] || prompts.notes;
  }
  // 使用文本模型处理转录文本
  async processTextWithLLM(transcribedText, model = "qwen-plus-latest") {
    try {
      console.log(`\u4F7F\u7528${model}\u6A21\u578B\u5904\u7406\u6587\u672C\uFF0C\u957F\u5EA6: ${transcribedText.length}\u5B57\u7B26`);
      const [processedText, tags] = await Promise.all([
        this.improveText(transcribedText, model),
        this.generateTags(transcribedText, model)
      ]);
      return {
        processedText,
        tags
      };
    } catch (error) {
      console.error("LLM\u6587\u672C\u5904\u7406\u5931\u8D25:", error);
      throw new Error(`\u6587\u672C\u5904\u7406\u5931\u8D25: ${error.message}`);
    }
  }
  // 文本整理和优化
  async improveText(text, model) {
    var _a, _b;
    const request = {
      model,
      messages: [
        {
          role: "system",
          content: "\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u6587\u672C\u7F16\u8F91\u52A9\u624B\u3002\u8BF7\u5BF9\u7528\u6237\u63D0\u4F9B\u7684\u8BED\u97F3\u8F6C\u5F55\u6587\u672C\u8FDB\u884C\u6574\u7406\u548C\u4F18\u5316\uFF0C\u8981\u6C42\uFF1A1. \u4FEE\u6B63\u8BED\u6CD5\u9519\u8BEF\u548C\u53E3\u8BED\u5316\u8868\u8FBE 2. \u4FDD\u6301\u539F\u59CB\u5185\u5BB9\u7684\u5B8C\u6574\u6027\u548C\u539F\u610F 3. \u4F18\u5316\u8868\u8FBE\u65B9\u5F0F\uFF0C\u4F7F\u5176\u66F4\u52A0\u6E05\u6670\u6613\u8BFB 4. \u4FDD\u6301\u903B\u8F91\u7ED3\u6784\u548C\u91CD\u8981\u4FE1\u606F\u4E0D\u53D8 5. \u4F7F\u7528\u89C4\u8303\u7684\u6807\u70B9\u7B26\u53F7 6. \u8F93\u51FA\u683C\u5F0F\u4E3A\u89C4\u6574\u7684\u4E2D\u6587\u6587\u672C"
        },
        {
          role: "user",
          content: `\u8BF7\u5BF9\u4EE5\u4E0B\u8BED\u97F3\u8F6C\u5F55\u6587\u672C\u8FDB\u884C\u6574\u7406\u548C\u4F18\u5316\uFF1A

${text}`
        }
      ]
    };
    const response = await this.callCompatibleAPI(request);
    return ((_b = (_a = response.choices[0]) == null ? void 0 : _a.message) == null ? void 0 : _b.content) || text;
  }
  // 生成相关标签
  async generateTags(text, model) {
    var _a, _b;
    const request = {
      model,
      messages: [
        {
          role: "system",
          content: "\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u5185\u5BB9\u5206\u6790\u52A9\u624B\u3002\u8BF7\u5206\u6790\u7528\u6237\u63D0\u4F9B\u7684\u6587\u672C\u5185\u5BB9\uFF0C\u751F\u62103-5\u4E2A\u76F8\u5173\u7684\u6807\u7B7E\u3002\u8981\u6C42\uFF1A1. \u6807\u7B7E\u5E94\u8BE5\u51C6\u786E\u53CD\u6620\u6587\u672C\u7684\u4E3B\u8981\u5185\u5BB9\u548C\u4E3B\u9898 2. \u4F7F\u7528\u7B80\u6D01\u7684\u4E2D\u6587\u8BCD\u6C47 3. \u907F\u514D\u8FC7\u4E8E\u5BBD\u6CDB\u6216\u8FC7\u4E8E\u5177\u4F53\u7684\u6807\u7B7E 4. \u6807\u7B7E\u4E4B\u95F4\u7528\u9017\u53F7\u5206\u9694 5. \u4E0D\u9700\u8981\u6DFB\u52A0#\u7B26\u53F7\uFF0C\u53EA\u8F93\u51FA\u6807\u7B7E\u6587\u5B57"
        },
        {
          role: "user",
          content: `\u8BF7\u4E3A\u4EE5\u4E0B\u6587\u672C\u751F\u6210\u76F8\u5173\u6807\u7B7E\uFF1A

${text}`
        }
      ]
    };
    const response = await this.callCompatibleAPI(request);
    const tagsText = ((_b = (_a = response.choices[0]) == null ? void 0 : _a.message) == null ? void 0 : _b.content) || "";
    return tagsText.split(/[,，、]/).map((tag) => tag.trim()).filter((tag) => tag.length > 0).slice(0, 5);
  }
  // 调用兼容模式API
  async callCompatibleAPI(request) {
    console.log("\u8C03\u7528\u517C\u5BB9\u6A21\u5F0FAPI:", this.compatibleUrl);
    console.log("\u8BF7\u6C42\u53C2\u6570:", JSON.stringify(request, null, 2));
    const response = await (0, import_obsidian.requestUrl)({
      url: this.compatibleUrl,
      method: "POST",
      headers: {
        "Authorization": `Bearer ${this.apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(request),
      throw: false
    });
    console.log("\u517C\u5BB9\u6A21\u5F0FAPI\u54CD\u5E94\u72B6\u6001:", response.status);
    if (response.status >= 400) {
      console.error("\u517C\u5BB9\u6A21\u5F0FAPI\u9519\u8BEF:", response.text);
      throw new Error(`\u517C\u5BB9\u6A21\u5F0FAPI\u8BF7\u6C42\u5931\u8D25 (${response.status}): ${response.text}`);
    }
    const data = response.json;
    console.log("\u517C\u5BB9\u6A21\u5F0FAPI\u54CD\u5E94\u6570\u636E:", JSON.stringify(data, null, 2));
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error("\u517C\u5BB9\u6A21\u5F0FAPI\u8FD4\u56DE\u6570\u636E\u683C\u5F0F\u5F02\u5E38");
    }
    return data;
  }
  // 测试文本LLM连接
  async testTextLLM(model = "qwen-plus-latest") {
    var _a, _b, _c;
    try {
      console.log(`\u5F00\u59CB\u6587\u672CLLM\u6D4B\u8BD5\uFF0C\u6A21\u578B: ${model}`);
      const testRequest = {
        model,
        messages: [
          {
            role: "system",
            content: "\u4F60\u662F\u4E00\u4E2A\u6709\u7528\u7684\u52A9\u624B\u3002"
          },
          {
            role: "user",
            content: "\u8BF7\u7B80\u5355\u4ECB\u7ECD\u4E00\u4E0B\u4F60\u81EA\u5DF1"
          }
        ]
      };
      const response = await this.callCompatibleAPI(testRequest);
      if ((_c = (_b = (_a = response.choices) == null ? void 0 : _a[0]) == null ? void 0 : _b.message) == null ? void 0 : _c.content) {
        console.log("\u6587\u672CLLM\u6D4B\u8BD5\u6210\u529F\uFF0C\u54CD\u5E94:", response.choices[0].message.content);
        return { success: true };
      } else {
        return {
          success: false,
          error: "\u54CD\u5E94\u683C\u5F0F\u5F02\u5E38"
        };
      }
    } catch (error) {
      console.error("\u6587\u672CLLM\u6D4B\u8BD5\u5931\u8D25:", error);
      let errorMessage = "\u672A\u77E5\u9519\u8BEF";
      if (error instanceof TypeError && error.message === "Failed to fetch") {
        errorMessage = "\u7F51\u7EDC\u8FDE\u63A5\u5931\u8D25";
      } else if (error.message) {
        errorMessage = error.message;
      }
      return {
        success: false,
        error: errorMessage
      };
    }
  }
};

// src/note-generator.ts
var NoteGenerator = class {
  constructor(app) {
    this.app = app;
  }
  /**
   * 生成笔记内容（新版本，支持AI处理结果）
   */
  generateNoteContentWithAI(processedContent, metadata, includeMetadata = true) {
    const { title, timestamp, duration, model, textModel, isProcessed } = metadata;
    let content = "";
    content += `# ${title}

`;
    if (processedContent.tags && processedContent.tags.length > 0) {
      content += this.formatTagsForObsidian(processedContent.tags) + "\n\n";
    } else {
      content += "#\u8BED\u97F3\u7B14\u8BB0\n\n";
    }
    if (includeMetadata) {
      content += `\u521B\u5EFA\u65F6\u95F4: ${timestamp.toLocaleString()}`;
      if (duration) {
        content += ` | \u65F6\u957F: ${duration}`;
      }
      content += ` | \u8BED\u97F3\u6A21\u578B: ${model}`;
      if (processedContent.isProcessed && textModel) {
        content += ` | \u6587\u672C\u6A21\u578B: ${textModel}`;
      }
      content += "\n\n";
    }
    if (processedContent.isProcessed) {
      content += "> \u2705 \u6B64\u5185\u5BB9\u5DF2\u901A\u8FC7AI\u4F18\u5316\u5904\u7406\n\n";
    }
    const textToUse = processedContent.isProcessed ? processedContent.processedText : processedContent.originalText;
    content += "## \u5185\u5BB9\n\n";
    content += this.formatAIResponse(textToUse);
    content += "\n\n";
    if (processedContent.isProcessed && processedContent.originalText !== processedContent.processedText) {
      content += "## \u539F\u59CB\u8F6C\u5F55\n\n";
      content += "> \u539F\u59CB\u8BED\u97F3\u8F6C\u5F55\u5185\u5BB9\n\n";
      content += processedContent.originalText;
      content += "\n\n";
    }
    return content;
  }
  /**
   * 生成笔记内容（向后兼容版本）
   */
  generateNoteContent(aiResponse, metadata, includeMetadata = true) {
    const processedContent = {
      originalText: aiResponse,
      processedText: aiResponse,
      tags: [],
      isProcessed: false
    };
    return this.generateNoteContentWithAI(processedContent, metadata, includeMetadata);
  }
  /**
   * 格式化AI响应内容
   */
  formatAIResponse(response) {
    if (this.isAlreadyFormatted(response)) {
      return response;
    }
    let formatted = response.trim();
    formatted = formatted.replace(/\n\n/g, "\n\n");
    formatted = formatted.replace(/^(\d+\.|[-*])\s*/gm, "- ");
    formatted = formatted.replace(/^([^\n]+)(?=\n[-=]{2,})/gm, "## $1");
    return formatted;
  }
  /**
   * 检查内容是否已经格式化
   */
  isAlreadyFormatted(content) {
    const markdownPatterns = [
      /^#+\s/m,
      // 标题
      /^\s*[-*+]\s/m,
      // 列表
      /^\s*\d+\.\s/m,
      // 有序列表
      /\*\*.*\*\*/,
      // 粗体
      /\*.*\*/,
      // 斜体
      /`.*`/
      // 代码
    ];
    return markdownPatterns.some((pattern) => pattern.test(content));
  }
  /**
   * 生成文件名
   */
  generateFileName(prefix = "\u8BED\u97F3\u7B14\u8BB0", timestamp) {
    const date = timestamp || new Date();
    const dateStr = date.getFullYear() + "-" + String(date.getMonth() + 1).padStart(2, "0") + "-" + String(date.getDate()).padStart(2, "0");
    const timeStr = String(date.getHours()).padStart(2, "0") + "-" + String(date.getMinutes()).padStart(2, "0") + "-" + String(date.getSeconds()).padStart(2, "0");
    return `${prefix}_${dateStr}_${timeStr}.md`;
  }
  /**
   * 确保目标文件夹存在
   */
  async ensureFolderExists(folderPath) {
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder) {
      await this.app.vault.createFolder(folderPath);
    }
  }
  /**
   * 保存笔记到文件
   */
  async saveNote(content, folderPath, fileName) {
    await this.ensureFolderExists(folderPath);
    const filePath = `${folderPath}/${fileName}`;
    const finalPath = await this.getUniqueFilePath(filePath);
    return await this.app.vault.create(finalPath, content);
  }
  /**
   * 获取唯一的文件路径（避免重名）
   */
  async getUniqueFilePath(originalPath) {
    let counter = 1;
    let testPath = originalPath;
    while (this.app.vault.getAbstractFileByPath(testPath)) {
      const pathParts = originalPath.split(".");
      const extension = pathParts.pop();
      const basePath = pathParts.join(".");
      testPath = `${basePath}_${counter}.${extension}`;
      counter++;
    }
    return testPath;
  }
  /**
   * 格式化标签为Obsidian格式
   */
  formatTagsForObsidian(tags) {
    if (!tags || tags.length === 0)
      return "#\u8BED\u97F3\u7B14\u8BB0";
    const formattedTags = tags.filter((tag) => tag.trim().length > 0).map((tag) => `#${tag.trim().replace(/\s+/g, "_")}`).join(" ");
    if (!formattedTags.includes("#\u8BED\u97F3\u7B14\u8BB0")) {
      return `${formattedTags} #\u8BED\u97F3\u7B14\u8BB0`;
    }
    return formattedTags;
  }
  /**
   * 格式化文件大小
   */
  formatFileSize(bytes) {
    if (bytes === 0)
      return "0 B";
    const k = 1024;
    const sizes = ["B", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  }
  /**
   * 格式化持续时间
   */
  formatDuration(milliseconds) {
    if (milliseconds < 1e3) {
      return `${milliseconds}ms`;
    }
    const seconds = Math.floor(milliseconds / 1e3);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    if (hours > 0) {
      return `${hours}\u65F6${minutes % 60}\u5206${seconds % 60}\u79D2`;
    } else if (minutes > 0) {
      return `${minutes}\u5206${seconds % 60}\u79D2`;
    } else {
      return `${seconds}\u79D2`;
    }
  }
  /**
   * 从音频内容提取可能的标题
   */
  extractTitleFromContent(content) {
    const lines = content.split("\n").filter((line) => line.trim());
    if (lines.length > 0) {
      let firstLine = lines[0].trim();
      firstLine = firstLine.replace(/^#+\s*/, "");
      if (firstLine.length > 50) {
        firstLine = firstLine.substring(0, 47) + "...";
      }
      return firstLine || "\u8BED\u97F3\u7B14\u8BB0";
    }
    return "\u8BED\u97F3\u7B14\u8BB0";
  }
  /**
   * 创建笔记模板
   */
  createNoteTemplate(templateType = "general") {
    const templates = {
      meeting: `# \u4F1A\u8BAE\u7B14\u8BB0

\u65F6\u95F4: 
\u53C2\u4E0E\u8005: 
\u8BAE\u9898: 

## \u5185\u5BB9

## \u51B3\u5B9A

## \u5F85\u529E

`,
      idea: `# \u521B\u610F\u60F3\u6CD5

## \u6838\u5FC3\u60F3\u6CD5

## \u8BE6\u7EC6\u63CF\u8FF0

## \u4E0B\u4E00\u6B65

`,
      todo: `# \u5F85\u529E

## \u7D27\u6025
- [ ] 

## \u91CD\u8981
- [ ] 

## \u5176\u4ED6
- [ ] 

`,
      general: `# \u8BED\u97F3\u7B14\u8BB0

## \u5185\u5BB9

## \u8981\u70B9

`
    };
    return templates[templateType];
  }
};

// src/settings.ts
var import_obsidian2 = require("obsidian");

// src/text-processor.ts
var TextProcessor = class {
  constructor(apiKey, settings) {
    this.client = new DashScopeClient(apiKey);
    this.settings = settings;
  }
  /**
   * 处理转录文本 - 主要入口点
   * @param transcribedText 原始转录文本
   * @returns 处理结果包含优化后的文本和标签
   */
  async processTranscribedText(transcribedText) {
    if (!this.settings.enableLLMProcessing) {
      return {
        originalText: transcribedText,
        processedText: transcribedText,
        tags: [],
        isProcessed: false
      };
    }
    try {
      console.log("\u5F00\u59CBLLM\u6587\u672C\u5904\u7406...");
      const result = await this.processWithRetry(transcribedText);
      return {
        originalText: transcribedText,
        processedText: result.processedText,
        tags: result.tags,
        isProcessed: true
      };
    } catch (error) {
      console.error("LLM\u5904\u7406\u5931\u8D25\uFF0C\u4F7F\u7528\u539F\u59CB\u6587\u672C:", error);
      return {
        originalText: transcribedText,
        processedText: transcribedText,
        tags: [],
        isProcessed: false
      };
    }
  }
  /**
   * 带重试机制的文本处理
   */
  async processWithRetry(text) {
    let lastError = null;
    for (let attempt = 1; attempt <= this.settings.maxRetries; attempt++) {
      try {
        console.log(`\u6587\u672C\u5904\u7406\u5C1D\u8BD5 ${attempt}/${this.settings.maxRetries}`);
        const result = await this.client.processTextWithLLM(
          text,
          this.settings.textModel
        );
        console.log("\u6587\u672C\u5904\u7406\u6210\u529F");
        return result;
      } catch (error) {
        lastError = error;
        console.error(`\u6587\u672C\u5904\u7406\u5C1D\u8BD5 ${attempt} \u5931\u8D25:`, error);
        if (attempt < this.settings.maxRetries) {
          await this.delay(1e3 * attempt);
        }
      }
    }
    throw lastError || new Error("\u6587\u672C\u5904\u7406\u5931\u8D25");
  }
  /**
   * 测试LLM连接
   */
  async testLLMConnection() {
    try {
      return await this.client.testTextLLM(this.settings.textModel);
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 更新设置
   */
  updateSettings(newSettings) {
    this.settings = { ...this.settings, ...newSettings };
  }
  /**
   * 获取当前设置
   */
  getSettings() {
    return { ...this.settings };
  }
  /**
   * 验证文本是否适合处理
   */
  validateText(text) {
    if (!text || text.trim().length === 0) {
      return { valid: false, reason: "\u6587\u672C\u4E3A\u7A7A" };
    }
    if (text.length < 10) {
      return { valid: false, reason: "\u6587\u672C\u8FC7\u77ED\uFF0C\u4E0D\u9700\u8981\u5904\u7406" };
    }
    if (text.length > 1e4) {
      return { valid: false, reason: "\u6587\u672C\u8FC7\u957F\uFF0C\u8D85\u51FA\u5904\u7406\u9650\u5236" };
    }
    return { valid: true };
  }
  /**
   * 获取支持的模型列表
   */
  getSupportedModels() {
    return [
      {
        id: "qwen-plus-latest",
        name: "Qwen Plus Latest",
        description: "\u9AD8\u8D28\u91CF\u6587\u672C\u5904\u7406\uFF0C\u63A8\u8350\u4F7F\u7528"
      },
      {
        id: "qwen-turbo-latest",
        name: "Qwen Turbo Latest",
        description: "\u5FEB\u901F\u6587\u672C\u5904\u7406\uFF0C\u6210\u672C\u8F83\u4F4E"
      },
      {
        id: "qwen-max-latest",
        name: "Qwen Max Latest",
        description: "\u6700\u9AD8\u8D28\u91CF\u6587\u672C\u5904\u7406\uFF0C\u6210\u672C\u8F83\u9AD8"
      }
    ];
  }
  /**
   * 延迟辅助函数
   */
  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  /**
   * 格式化标签为Obsidian格式
   */
  formatTagsForObsidian(tags) {
    if (!tags || tags.length === 0)
      return "";
    return tags.filter((tag) => tag.trim().length > 0).map((tag) => `#${tag.trim().replace(/\s+/g, "_")}`).join(" ");
  }
  /**
   * 生成处理摘要信息
   */
  generateProcessingSummary(result) {
    const lines = [];
    if (result.isProcessed) {
      lines.push("\u2705 \u6587\u672C\u5DF2\u901A\u8FC7AI\u5904\u7406\u4F18\u5316");
      lines.push(`\u{1F4CA} \u539F\u59CB\u957F\u5EA6: ${result.originalText.length}\u5B57\u7B26`);
      lines.push(`\u{1F4CA} \u5904\u7406\u540E\u957F\u5EA6: ${result.processedText.length}\u5B57\u7B26`);
      if (result.tags.length > 0) {
        lines.push(`\u{1F3F7}\uFE0F \u751F\u6210\u6807\u7B7E: ${result.tags.length}\u4E2A`);
      }
    } else {
      lines.push("\u{1F4DD} \u4F7F\u7528\u539F\u59CB\u8F6C\u5F55\u6587\u672C");
    }
    return lines.join("\n");
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  apiKey: "",
  modelName: "qwen-audio-asr-latest",
  outputFolder: "GetNote",
  audioQuality: "medium",
  maxRecordingDuration: 300,
  // 5分钟
  autoSave: true,
  includeTimestamp: true,
  includeMetadata: true,
  promptTemplate: "\u8F6C\u5F55\u5B8C\u6210\u7684\u6587\u672C\u5C06\u81EA\u52A8\u6574\u7406\u6210\u7B14\u8BB0\u683C\u5F0F",
  noteTemplate: "general",
  // LLM文本处理默认设置
  enableLLMProcessing: false,
  textModel: "qwen-plus-latest",
  processOriginalText: true,
  generateTags: true,
  maxRetries: 2
};
var GetNoteSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.apiTestResult = null;
    this.textLLMTestResult = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "GetNote \u63D2\u4EF6\u8BBE\u7F6E" });
    this.createApiSettings(containerEl);
    this.createLLMSettings(containerEl);
    this.createRecordingSettings(containerEl);
    this.createOutputSettings(containerEl);
    this.createTemplateSettings(containerEl);
    this.createAdvancedSettings(containerEl);
  }
  createApiSettings(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F511} API \u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u963F\u91CC\u4E91API Key").setDesc("\u8BF7\u8F93\u5165\u60A8\u7684\u963F\u91CC\u4E91DashScope API Key").addText((text) => text.setPlaceholder("sk-xxxxxxxxxxxxxxxxxxxxxxxx").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
      if (this.apiTestResult) {
        this.apiTestResult.empty();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6A21\u578B\u540D\u79F0").setDesc("\u4F7F\u7528\u7684\u8BED\u97F3\u8F6C\u6587\u5B57\u6A21\u578B").addDropdown((dropdown) => dropdown.addOption("qwen-audio-asr-latest", "Qwen Audio ASR Latest (\u8BED\u97F3\u8F6C\u6587\u5B57\u4E13\u7528)").addOption("qwen-audio-asr", "Qwen Audio ASR (\u8BED\u97F3\u8F6C\u6587\u5B57)").setValue(this.plugin.settings.modelName).onChange(async (value) => {
      this.plugin.settings.modelName = value;
      await this.plugin.saveSettings();
    }));
    const apiTestSetting = new import_obsidian2.Setting(containerEl).setName("API \u8FDE\u63A5\u6D4B\u8BD5").setDesc("\u6D4B\u8BD5API Key\u662F\u5426\u6709\u6548").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5").setCta().onClick(async () => {
      await this.testApiConnection(button.buttonEl);
    }));
    this.apiTestResult = apiTestSetting.settingEl.createDiv("api-test-result");
  }
  createLLMSettings(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F916} AI\u6587\u672C\u5904\u7406\u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u542F\u7528AI\u6587\u672C\u5904\u7406").setDesc("\u4F7F\u7528AI\u6A21\u578B\u5BF9\u8BED\u97F3\u8F6C\u5F55\u6587\u672C\u8FDB\u884C\u4F18\u5316\u548C\u6807\u7B7E\u751F\u6210").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableLLMProcessing).onChange(async (value) => {
      this.plugin.settings.enableLLMProcessing = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.enableLLMProcessing) {
      new import_obsidian2.Setting(containerEl).setName("\u6587\u672C\u5904\u7406\u6A21\u578B").setDesc("\u9009\u62E9\u7528\u4E8E\u6587\u672C\u5904\u7406\u7684AI\u6A21\u578B").addDropdown((dropdown) => dropdown.addOption("qwen-plus-latest", "Qwen Plus Latest (\u63A8\u8350)").addOption("qwen-turbo-latest", "Qwen Turbo Latest (\u5FEB\u901F)").addOption("qwen-max-latest", "Qwen Max Latest (\u9AD8\u8D28\u91CF)").setValue(this.plugin.settings.textModel).onChange(async (value) => {
        this.plugin.settings.textModel = value;
        await this.plugin.saveSettings();
        if (this.textLLMTestResult) {
          this.textLLMTestResult.empty();
        }
      }));
      new import_obsidian2.Setting(containerEl).setName("\u6587\u672C\u4F18\u5316").setDesc("\u5BF9\u539F\u59CB\u8F6C\u5F55\u6587\u672C\u8FDB\u884C\u8BED\u6CD5\u4F18\u5316\u548C\u8868\u8FBE\u6539\u8FDB").addToggle((toggle) => toggle.setValue(this.plugin.settings.processOriginalText).onChange(async (value) => {
        this.plugin.settings.processOriginalText = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian2.Setting(containerEl).setName("\u81EA\u52A8\u751F\u6210\u6807\u7B7E").setDesc("\u6839\u636E\u6587\u672C\u5185\u5BB9\u81EA\u52A8\u751F\u6210\u76F8\u5173\u6807\u7B7E").addToggle((toggle) => toggle.setValue(this.plugin.settings.generateTags).onChange(async (value) => {
        this.plugin.settings.generateTags = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian2.Setting(containerEl).setName("\u91CD\u8BD5\u6B21\u6570").setDesc("AI\u5904\u7406\u5931\u8D25\u65F6\u7684\u91CD\u8BD5\u6B21\u6570").addText((text) => text.setPlaceholder("2").setValue(this.plugin.settings.maxRetries.toString()).onChange(async (value) => {
        const retries = parseInt(value) || 2;
        this.plugin.settings.maxRetries = Math.max(1, Math.min(5, retries));
        await this.plugin.saveSettings();
      }));
      const textLLMTestSetting = new import_obsidian2.Setting(containerEl).setName("\u6587\u672CAI\u6D4B\u8BD5").setDesc("\u6D4B\u8BD5\u6587\u672C\u5904\u7406AI\u6A21\u578B\u662F\u5426\u6B63\u5E38\u5DE5\u4F5C").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u6587\u672CAI").setCta().onClick(async () => {
        await this.testTextLLM(button.buttonEl);
      }));
      this.textLLMTestResult = textLLMTestSetting.settingEl.createDiv("text-llm-test-result");
    }
  }
  createRecordingSettings(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F399}\uFE0F \u5F55\u97F3\u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u97F3\u9891\u8D28\u91CF").setDesc("\u5F55\u97F3\u7684\u97F3\u9891\u8D28\u91CF\u8BBE\u7F6E").addDropdown((dropdown) => dropdown.addOption("low", "\u4F4E\u8D28\u91CF (\u8282\u7701\u7A7A\u95F4)").addOption("medium", "\u4E2D\u7B49\u8D28\u91CF (\u63A8\u8350)").addOption("high", "\u9AD8\u8D28\u91CF (\u6700\u4F73\u6548\u679C)").setValue(this.plugin.settings.audioQuality).onChange(async (value) => {
      this.plugin.settings.audioQuality = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5927\u5F55\u97F3\u65F6\u957F").setDesc("\u5355\u6B21\u5F55\u97F3\u7684\u6700\u5927\u65F6\u957F\u9650\u5236\uFF08\u79D2\uFF09").addText((text) => text.setPlaceholder("300").setValue(this.plugin.settings.maxRecordingDuration.toString()).onChange(async (value) => {
      const duration = parseInt(value) || 300;
      this.plugin.settings.maxRecordingDuration = Math.max(30, Math.min(1800, duration));
      await this.plugin.saveSettings();
    }));
  }
  createOutputSettings(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F4C1} \u8F93\u51FA\u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u8F93\u51FA\u6587\u4EF6\u5939").setDesc("\u8BED\u97F3\u7B14\u8BB0\u4FDD\u5B58\u7684\u6587\u4EF6\u5939\u540D\u79F0").addText((text) => text.setPlaceholder("GetNote").setValue(this.plugin.settings.outputFolder).onChange(async (value) => {
      this.plugin.settings.outputFolder = value || "GetNote";
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u81EA\u52A8\u4FDD\u5B58").setDesc("\u5F55\u97F3\u7ED3\u675F\u540E\u81EA\u52A8\u4FDD\u5B58\u7B14\u8BB0").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoSave).onChange(async (value) => {
      this.plugin.settings.autoSave = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u5305\u542B\u65F6\u95F4\u6233").setDesc("\u5728\u7B14\u8BB0\u4E2D\u5305\u542B\u521B\u5EFA\u65F6\u95F4").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeTimestamp).onChange(async (value) => {
      this.plugin.settings.includeTimestamp = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u5305\u542B\u5143\u6570\u636E").setDesc("\u5728\u7B14\u8BB0\u4E2D\u5305\u542B\u5F55\u97F3\u4FE1\u606F\u7B49\u5143\u6570\u636E").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeMetadata).onChange(async (value) => {
      this.plugin.settings.includeMetadata = value;
      await this.plugin.saveSettings();
    }));
  }
  createTemplateSettings(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F4DD} \u6A21\u677F\u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u7B14\u8BB0\u6A21\u677F").setDesc("\u9009\u62E9\u7B14\u8BB0\u7684\u9ED8\u8BA4\u6A21\u677F\u7C7B\u578B").addDropdown((dropdown) => dropdown.addOption("general", "\u901A\u7528\u7B14\u8BB0").addOption("meeting", "\u4F1A\u8BAE\u8BB0\u5F55").addOption("idea", "\u521B\u610F\u60F3\u6CD5").addOption("todo", "\u5F85\u529E\u6E05\u5355").setValue(this.plugin.settings.noteTemplate).onChange(async (value) => {
      this.plugin.settings.noteTemplate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u7B14\u8BB0\u683C\u5F0F\u8BF4\u660E").setDesc("qwen-audio-asr\u6A21\u578B\u4E13\u95E8\u7528\u4E8E\u8BED\u97F3\u8F6C\u6587\u5B57\uFF0C\u4F1A\u76F4\u63A5\u8F93\u51FA\u8F6C\u5F55\u6587\u672C\uFF0C\u65E0\u9700\u590D\u6742\u63D0\u793A\u8BCD").addTextArea((text) => text.setPlaceholder("\u8BED\u97F3\u8F6C\u6587\u5B57\u5B8C\u6210\u540E\uFF0C\u6587\u672C\u5C06\u81EA\u52A8\u6574\u7406\u4E3A\u7B14\u8BB0...").setValue(this.plugin.settings.promptTemplate).setDisabled(true).onChange(async (value) => {
      this.plugin.settings.promptTemplate = value || DEFAULT_SETTINGS.promptTemplate;
      await this.plugin.saveSettings();
    })).then((setting) => {
      var _a;
      (_a = setting.controlEl.find("textarea")) == null ? void 0 : _a.setAttribute("rows", "2");
    });
  }
  createAdvancedSettings(containerEl) {
    containerEl.createEl("h3", { text: "\u2699\uFE0F \u9AD8\u7EA7\u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u91CD\u7F6E\u8BBE\u7F6E").setDesc("\u6062\u590D\u6240\u6709\u8BBE\u7F6E\u4E3A\u9ED8\u8BA4\u503C").addButton((button) => button.setButtonText("\u91CD\u7F6E").setWarning().onClick(async () => {
      const confirmed = confirm("\u786E\u5B9A\u8981\u91CD\u7F6E\u6240\u6709\u8BBE\u7F6E\u5417\uFF1F\u6B64\u64CD\u4F5C\u4E0D\u53EF\u64A4\u9500\u3002");
      if (confirmed) {
        this.plugin.settings = { ...DEFAULT_SETTINGS };
        await this.plugin.saveSettings();
        this.display();
        new import_obsidian2.Notice("\u8BBE\u7F6E\u5DF2\u91CD\u7F6E");
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u5BFC\u51FA\u8BBE\u7F6E").setDesc("\u5C06\u5F53\u524D\u8BBE\u7F6E\u5BFC\u51FA\u4E3AJSON\u6587\u4EF6").addButton((button) => button.setButtonText("\u5BFC\u51FA").onClick(() => {
      this.exportSettings();
    }));
  }
  async testApiConnection(buttonEl) {
    if (!this.plugin.settings.apiKey.trim()) {
      this.showTestResult("\u8BF7\u5148\u8F93\u5165API Key", "error");
      return;
    }
    buttonEl.setText("\u6D4B\u8BD5\u4E2D...");
    buttonEl.disabled = true;
    try {
      console.log("\u5F00\u59CBAPI\u8FDE\u63A5\u6D4B\u8BD5\uFF0CAPI Key:", this.plugin.settings.apiKey.substring(0, 10) + "...");
      const client = new DashScopeClient(this.plugin.settings.apiKey);
      const result = await client.testConnection();
      if (result.success) {
        this.showTestResult("\u2705 API\u8FDE\u63A5\u6210\u529F\uFF01", "success");
        console.log("API\u6D4B\u8BD5\u6210\u529F");
      } else {
        const errorMsg = result.error || "\u672A\u77E5\u9519\u8BEF";
        this.showTestResult(`\u274C API\u8FDE\u63A5\u5931\u8D25: ${errorMsg}`, "error");
        console.error("API\u6D4B\u8BD5\u5931\u8D25:", errorMsg);
      }
    } catch (error) {
      const errorMsg = `\u8FDE\u63A5\u6D4B\u8BD5\u5F02\u5E38: ${error.message}`;
      this.showTestResult(`\u274C ${errorMsg}`, "error");
      console.error("API\u6D4B\u8BD5\u5F02\u5E38:", error);
    } finally {
      buttonEl.setText("\u6D4B\u8BD5\u8FDE\u63A5");
      buttonEl.disabled = false;
    }
  }
  async testTextLLM(buttonEl) {
    if (!this.plugin.settings.apiKey.trim()) {
      this.showTextLLMTestResult("\u8BF7\u5148\u8F93\u5165API Key", "error");
      return;
    }
    buttonEl.setText("\u6D4B\u8BD5\u4E2D...");
    buttonEl.disabled = true;
    try {
      console.log("\u5F00\u59CB\u6587\u672CLLM\u6D4B\u8BD5\uFF0C\u6A21\u578B:", this.plugin.settings.textModel);
      const textProcessor = new TextProcessor(this.plugin.settings.apiKey, {
        enableLLMProcessing: true,
        textModel: this.plugin.settings.textModel,
        processOriginalText: this.plugin.settings.processOriginalText,
        generateTags: this.plugin.settings.generateTags,
        maxRetries: this.plugin.settings.maxRetries
      });
      const result = await textProcessor.testLLMConnection();
      if (result.success) {
        this.showTextLLMTestResult("\u2705 \u6587\u672CAI\u8FDE\u63A5\u6210\u529F\uFF01", "success");
        console.log("\u6587\u672CLLM\u6D4B\u8BD5\u6210\u529F");
      } else {
        const errorMsg = result.error || "\u672A\u77E5\u9519\u8BEF";
        this.showTextLLMTestResult(`\u274C \u6587\u672CAI\u8FDE\u63A5\u5931\u8D25: ${errorMsg}`, "error");
        console.error("\u6587\u672CLLM\u6D4B\u8BD5\u5931\u8D25:", errorMsg);
      }
    } catch (error) {
      const errorMsg = `\u6587\u672CAI\u6D4B\u8BD5\u5F02\u5E38: ${error.message}`;
      this.showTextLLMTestResult(`\u274C ${errorMsg}`, "error");
      console.error("\u6587\u672CLLM\u6D4B\u8BD5\u5F02\u5E38:", error);
    } finally {
      buttonEl.setText("\u6D4B\u8BD5\u6587\u672CAI");
      buttonEl.disabled = false;
    }
  }
  showTestResult(message, type) {
    if (this.apiTestResult) {
      this.apiTestResult.empty();
      const resultEl = this.apiTestResult.createDiv();
      resultEl.setText(message);
      resultEl.addClass(`test-result-${type}`);
      if (type === "success") {
        resultEl.style.color = "#10b981";
      } else {
        resultEl.style.color = "#ef4444";
      }
      resultEl.style.marginTop = "8px";
      resultEl.style.fontSize = "14px";
    }
  }
  showTextLLMTestResult(message, type) {
    if (this.textLLMTestResult) {
      this.textLLMTestResult.empty();
      const resultEl = this.textLLMTestResult.createDiv();
      resultEl.setText(message);
      resultEl.addClass(`test-result-${type}`);
      if (type === "success") {
        resultEl.style.color = "#10b981";
      } else {
        resultEl.style.color = "#ef4444";
      }
      resultEl.style.marginTop = "8px";
      resultEl.style.fontSize = "14px";
    }
  }
  exportSettings() {
    const settingsData = JSON.stringify(this.plugin.settings, null, 2);
    const blob = new Blob([settingsData], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "getnote-settings.json";
    link.click();
    URL.revokeObjectURL(url);
    new import_obsidian2.Notice("\u8BBE\u7F6E\u5DF2\u5BFC\u51FA");
  }
};

// src/recording-modal.ts
var import_obsidian3 = require("obsidian");
var RecordingModal = class extends import_obsidian3.Modal {
  constructor(app, onRecordingComplete, onError, enableLLMProcessing = false) {
    super(app);
    this.audioRecorder = null;
    this.state = "idle";
    this.timerInterval = null;
    // Processing state
    this.enableLLMProcessing = false;
    this.onRecordingComplete = onRecordingComplete;
    this.onError = onError;
    this.enableLLMProcessing = enableLLMProcessing;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("recording-modal");
    const container = contentEl.createDiv("simple-recording-container");
    const title = container.createEl("h2", { text: "\u{1F399}\uFE0F \u8BED\u97F3\u5F55\u5236" });
    title.addClass("simple-recording-title");
    this.statusContainer = container.createDiv("simple-status");
    this.statusContainer.addClass("status-idle");
    this.statusDot = this.statusContainer.createDiv("status-dot");
    this.statusText = this.statusContainer.createEl("span", { text: "\u51C6\u5907\u5F55\u97F3" });
    this.statusText.addClass("status-text");
    this.timeDisplay = container.createEl("div", { text: "00:00" });
    this.timeDisplay.addClass("simple-time");
    const buttonGroup = container.createDiv("simple-buttons");
    const startButtonEl = buttonGroup.createEl("button");
    startButtonEl.addClass("start-btn");
    this.startButton = new import_obsidian3.ButtonComponent(startButtonEl).setButtonText("\u{1F3A4} \u5F00\u59CB\u5F55\u97F3").onClick(() => this.handleStart());
    const pauseButtonEl = buttonGroup.createEl("button");
    pauseButtonEl.addClass("pause-btn");
    this.pauseButton = new import_obsidian3.ButtonComponent(pauseButtonEl).setButtonText("\u23F8\uFE0F \u6682\u505C").setDisabled(true).onClick(() => this.handlePause());
    const stopButtonEl = buttonGroup.createEl("button");
    stopButtonEl.addClass("stop-btn");
    this.stopButton = new import_obsidian3.ButtonComponent(stopButtonEl).setButtonText("\u23F9\uFE0F \u505C\u6B62").setDisabled(true).onClick(() => this.handleStop());
    const hintText = this.enableLLMProcessing ? "\u70B9\u51FB\u5F00\u59CB\u5F55\u97F3\uFF0C\u5B8C\u6210\u540E\u5C06\u8FDB\u884CAI\u8F6C\u5F55\u548C\u6587\u672C\u4F18\u5316" : "\u70B9\u51FB\u5F00\u59CB\u5F55\u97F3\uFF0C\u5F55\u97F3\u5B8C\u6210\u540E\u5C06\u81EA\u52A8\u8F6C\u6362\u4E3A\u6587\u5B57\u7B14\u8BB0";
    this.hintText = container.createEl("div", { text: hintText });
    this.hintText.addClass("simple-hint");
    this.updateUI();
  }
  onClose() {
    if (this.timerInterval) {
      clearInterval(this.timerInterval);
      this.timerInterval = null;
    }
    if (this.audioRecorder && this.audioRecorder.getRecordingState()) {
      this.audioRecorder.stopRecording();
    }
    this.audioRecorder = null;
  }
  async handleStart() {
    var _a;
    try {
      if (this.state === "paused") {
        (_a = this.audioRecorder) == null ? void 0 : _a.resumeRecording();
        this.setState("recording");
        new import_obsidian3.Notice("\u7EE7\u7EED\u5F55\u97F3...");
      } else {
        this.setState("recording");
        const hasPermission = await AudioRecorder.checkMicrophonePermission();
        if (!hasPermission) {
          throw new Error("\u9700\u8981\u9EA6\u514B\u98CE\u6743\u9650\u624D\u80FD\u5F55\u97F3");
        }
        this.audioRecorder = new AudioRecorder(
          (audioBlob) => this.handleRecordingComplete(audioBlob),
          (error) => this.handleRecordingError(error)
        );
        await this.audioRecorder.startRecording();
        this.startTimer();
        new import_obsidian3.Notice("\u5F00\u59CB\u5F55\u97F3...");
      }
    } catch (error) {
      this.setState("idle");
      this.onError(error);
    }
  }
  handlePause() {
    if (!this.audioRecorder)
      return;
    this.audioRecorder.pauseRecording();
    this.setState("paused");
    new import_obsidian3.Notice("\u5F55\u97F3\u5DF2\u6682\u505C");
  }
  async handleStop() {
    if (this.audioRecorder && this.audioRecorder.getRecordingState()) {
      this.audioRecorder.stopRecording();
    }
  }
  async handleRecordingComplete(audioBlob) {
    try {
      if (this.timerInterval) {
        clearInterval(this.timerInterval);
        this.timerInterval = null;
      }
      this.setState("transcribing");
      await this.onRecordingComplete(audioBlob);
      this.close();
    } catch (error) {
      this.setState("idle");
      this.onError(error);
    }
  }
  handleRecordingError(error) {
    this.setState("idle");
    this.onError(error);
  }
  setState(newState) {
    this.state = newState;
    this.updateUI();
  }
  updateUI() {
    this.statusContainer.removeClass("status-idle", "status-recording", "status-paused");
    this.timeDisplay.removeClass("recording");
    switch (this.state) {
      case "idle":
        this.statusContainer.addClass("status-idle");
        this.statusText.textContent = "\u51C6\u5907\u5F55\u97F3";
        this.hintText.textContent = this.enableLLMProcessing ? "\u70B9\u51FB\u5F00\u59CB\u5F55\u97F3\uFF0C\u5B8C\u6210\u540E\u5C06\u8FDB\u884CAI\u8F6C\u5F55\u548C\u6587\u672C\u4F18\u5316" : "\u70B9\u51FB\u5F00\u59CB\u5F55\u97F3\uFF0C\u5F55\u97F3\u5B8C\u6210\u540E\u5C06\u81EA\u52A8\u8F6C\u6362\u4E3A\u6587\u5B57\u7B14\u8BB0";
        this.startButton.setDisabled(false).setButtonText("\u{1F3A4} \u5F00\u59CB\u5F55\u97F3");
        this.pauseButton.setDisabled(true);
        this.stopButton.setDisabled(true);
        break;
      case "recording":
        this.statusContainer.addClass("status-recording");
        this.statusText.textContent = "\u6B63\u5728\u5F55\u97F3...";
        this.timeDisplay.addClass("recording");
        this.hintText.textContent = "\u6B63\u5728\u5F55\u97F3\u4E2D\uFF0C\u53EF\u4EE5\u6682\u505C\u6216\u505C\u6B62\u5F55\u97F3";
        this.startButton.setDisabled(true);
        this.pauseButton.setDisabled(false);
        this.stopButton.setDisabled(false);
        break;
      case "paused":
        this.statusContainer.addClass("status-paused");
        this.statusText.textContent = "\u5F55\u97F3\u5DF2\u6682\u505C";
        this.timeDisplay.removeClass("recording");
        this.hintText.textContent = "\u5F55\u97F3\u5DF2\u6682\u505C\uFF0C\u53EF\u4EE5\u7EE7\u7EED\u5F55\u97F3\u6216\u505C\u6B62\u5F55\u97F3";
        this.startButton.setDisabled(false).setButtonText("\u25B6\uFE0F \u7EE7\u7EED\u5F55\u97F3");
        this.pauseButton.setDisabled(true);
        this.stopButton.setDisabled(false);
        break;
      case "transcribing":
        this.statusContainer.addClass("status-recording");
        this.statusText.textContent = "\u{1F504} \u6B63\u5728\u8F6C\u5F55...";
        this.timeDisplay.removeClass("recording");
        this.hintText.textContent = "\u6B63\u5728\u5C06\u8BED\u97F3\u8F6C\u6362\u4E3A\u6587\u5B57\uFF0C\u8BF7\u7A0D\u5019...";
        this.startButton.setDisabled(true);
        this.pauseButton.setDisabled(true);
        this.stopButton.setDisabled(true);
        break;
      case "processing":
        this.statusContainer.addClass("status-recording");
        this.statusText.textContent = "\u{1F916} AI\u5904\u7406\u4E2D...";
        this.timeDisplay.removeClass("recording");
        this.hintText.textContent = "\u6B63\u5728\u4F7F\u7528AI\u4F18\u5316\u6587\u672C\u5185\u5BB9\u548C\u751F\u6210\u6807\u7B7E\uFF0C\u8BF7\u7A0D\u5019...";
        this.startButton.setDisabled(true);
        this.pauseButton.setDisabled(true);
        this.stopButton.setDisabled(true);
        break;
      case "saving":
        this.statusContainer.addClass("status-recording");
        this.statusText.textContent = "\u{1F4BE} \u4FDD\u5B58\u4E2D...";
        this.timeDisplay.removeClass("recording");
        this.hintText.textContent = "\u6B63\u5728\u4FDD\u5B58\u7B14\u8BB0\u5230\u60A8\u7684\u5E93\u4E2D...";
        this.startButton.setDisabled(true);
        this.pauseButton.setDisabled(true);
        this.stopButton.setDisabled(true);
        break;
    }
  }
  startTimer() {
    this.timerInterval = window.setInterval(() => {
      if (this.audioRecorder) {
        const duration = this.audioRecorder.getRecordingDuration();
        this.timeDisplay.textContent = this.formatTime(duration);
      }
    }, 100);
  }
  formatTime(milliseconds) {
    const totalSeconds = Math.floor(milliseconds / 1e3);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  }
  // 公共方法：允许外部更新处理状态
  updateProcessingState(state) {
    this.setState(state);
  }
};

// main.ts
var GetNotePlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.dashScopeClient = null;
    this.recordingModal = null;
    this.textProcessor = null;
  }
  async onload() {
    await this.loadSettings();
    this.noteGenerator = new NoteGenerator(this.app);
    this.updateDashScopeClient();
    if (!AudioRecorder.isSupported()) {
      new import_obsidian4.Notice("\u5F53\u524D\u6D4F\u89C8\u5668\u4E0D\u652F\u6301\u5F55\u97F3\u529F\u80FD");
      return;
    }
    this.addRibbonIcon("microphone", "\u6253\u5F00\u5F55\u97F3\u754C\u9762", (evt) => {
      this.openRecordingModal();
    });
    this.addCommand({
      id: "open-recording-modal",
      name: "\u6253\u5F00\u5F55\u97F3\u754C\u9762",
      callback: () => {
        this.openRecordingModal();
      }
    });
    this.addSettingTab(new GetNoteSettingTab(this.app, this));
  }
  onunload() {
    if (this.recordingModal) {
      this.recordingModal.close();
      this.recordingModal = null;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateDashScopeClient();
  }
  updateDashScopeClient() {
    if (this.settings.apiKey) {
      this.dashScopeClient = new DashScopeClient(this.settings.apiKey);
      this.textProcessor = new TextProcessor(this.settings.apiKey, {
        enableLLMProcessing: this.settings.enableLLMProcessing,
        textModel: this.settings.textModel,
        processOriginalText: this.settings.processOriginalText,
        generateTags: this.settings.generateTags,
        maxRetries: this.settings.maxRetries
      });
    }
  }
  openRecordingModal() {
    if (!this.settings.apiKey) {
      new import_obsidian4.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6EAPI Key");
      return;
    }
    if (!this.dashScopeClient) {
      new import_obsidian4.Notice("API\u5BA2\u6237\u7AEF\u672A\u521D\u59CB\u5316\uFF0C\u8BF7\u68C0\u67E5\u8BBE\u7F6E");
      return;
    }
    this.recordingModal = new RecordingModal(
      this.app,
      (audioBlob) => this.handleAudioData(audioBlob),
      (error) => this.handleRecordingError(error),
      this.settings.enableLLMProcessing
    );
    this.recordingModal.open();
  }
  async handleAudioData(audioBlob) {
    const processingStartTime = Date.now();
    try {
      if (!this.dashScopeClient) {
        throw new Error("API\u5BA2\u6237\u7AEF\u672A\u521D\u59CB\u5316");
      }
      const sizeCheck = this.dashScopeClient.checkAudioSize(audioBlob);
      if (!sizeCheck.valid) {
        new import_obsidian4.Notice(sizeCheck.message || "\u97F3\u9891\u6587\u4EF6\u8FC7\u5927");
        return;
      }
      new import_obsidian4.Notice("\u6B63\u5728\u8C03\u7528AI\u8F6C\u5F55\u97F3\u9891...");
      console.log("\u5F00\u59CB\u8BED\u97F3\u8F6C\u5F55\u5904\u7406");
      const transcribedText = await this.dashScopeClient.processAudio(audioBlob);
      console.log("\u8BED\u97F3\u8F6C\u5F55\u5B8C\u6210\uFF0C\u6587\u672C\u957F\u5EA6:", transcribedText.length);
      let processedContent;
      if (this.settings.enableLLMProcessing && this.textProcessor) {
        if (this.recordingModal) {
          this.recordingModal.updateProcessingState("processing");
        }
        new import_obsidian4.Notice("\u6B63\u5728\u4F7F\u7528AI\u4F18\u5316\u6587\u672C...");
        console.log("\u5F00\u59CBAI\u6587\u672C\u5904\u7406");
        processedContent = await this.textProcessor.processTranscribedText(transcribedText);
        console.log("AI\u6587\u672C\u5904\u7406\u5B8C\u6210\uFF0C\u662F\u5426\u5DF2\u5904\u7406:", processedContent.isProcessed);
      } else {
        processedContent = {
          originalText: transcribedText,
          processedText: transcribedText,
          tags: [],
          isProcessed: false
        };
      }
      if (this.recordingModal) {
        this.recordingModal.updateProcessingState("saving");
      }
      const processingDuration = Date.now() - processingStartTime;
      const metadata = {
        title: this.noteGenerator.extractTitleFromContent(
          processedContent.isProcessed ? processedContent.processedText : processedContent.originalText
        ),
        timestamp: new Date(),
        duration: "\u97F3\u9891\u8F6C\u5F55",
        // 由于使用Modal，录音时长在Modal中管理
        audioSize: this.noteGenerator.formatFileSize(audioBlob.size),
        processingTime: this.noteGenerator.formatDuration(processingDuration),
        model: this.settings.modelName,
        textModel: this.settings.enableLLMProcessing ? this.settings.textModel : void 0,
        isProcessed: processedContent.isProcessed
      };
      const noteContent = this.noteGenerator.generateNoteContentWithAI(
        processedContent,
        metadata,
        this.settings.includeMetadata
      );
      if (this.settings.autoSave) {
        const fileName = this.noteGenerator.generateFileName("\u8BED\u97F3\u8F6C\u5F55", metadata.timestamp);
        const savedFile = await this.noteGenerator.saveNote(
          noteContent,
          this.settings.outputFolder,
          fileName
        );
        if (processedContent.isProcessed) {
          new import_obsidian4.Notice(`AI\u5904\u7406\u5B8C\u6210\uFF01\u7B14\u8BB0\u5DF2\u4FDD\u5B58: ${savedFile.name}\uFF0C\u5305\u542B${processedContent.tags.length}\u4E2A\u6807\u7B7E`);
        } else {
          new import_obsidian4.Notice(`\u8F6C\u5F55\u5B8C\u6210\uFF0C\u7B14\u8BB0\u5DF2\u4FDD\u5B58: ${savedFile.name}`);
        }
        console.log("\u7B14\u8BB0\u4FDD\u5B58\u5B8C\u6210:", savedFile.path);
      } else {
        const message = processedContent.isProcessed ? "AI\u6587\u672C\u5904\u7406\u5B8C\u6210\uFF0C\u8BF7\u624B\u52A8\u4FDD\u5B58\u7B14\u8BB0" : "\u97F3\u9891\u8F6C\u5F55\u5B8C\u6210\uFF0C\u8BF7\u624B\u52A8\u4FDD\u5B58\u7B14\u8BB0";
        new import_obsidian4.Notice(message);
      }
    } catch (error) {
      console.error("\u5904\u7406\u97F3\u9891\u65F6\u51FA\u9519:", error);
      new import_obsidian4.Notice(`\u5904\u7406\u97F3\u9891\u65F6\u51FA\u9519: ${error.message}`);
      if (this.recordingModal) {
        this.recordingModal.close();
      }
    }
  }
  handleRecordingError(error) {
    console.error("\u5F55\u97F3\u9519\u8BEF:", error);
    new import_obsidian4.Notice(`\u5F55\u97F3\u51FA\u9519: ${error.message}`);
  }
};
